#include "F28x_Project.h"
void ADCint(void);
void SysControl(void);
void PWMInit(void);
__interrupt void adcAISR(void);
__interrupt void PWMISR(void);
void timerint(void);
int i,j,q,k;
void main(void)
{   DINT;
    IER=0X0000;
    ADCint();
    SysControl();
    timerint();
     PWMInit();
        PieCtrlRegs.PIECTRL.bit.ENPIE=1;
        PieCtrlRegs.PIEIER1.bit.INTx1=1;    //enable the adcA interrupt
        PieVectTable.ADCA1_INT=&adcAISR;    // address of the function(function pointer)-THIS ADDRESS IS FOR COMPILER
        PieCtrlRegs.PIEACK.bit.ACK1=1;      //10th group

        PieCtrlRegs.PIECTRL.bit.ENPIE=1;
        PieCtrlRegs.PIEIER3.bit.INTx1=1;
        PieVectTable.EPWM1_INT=&PWMISR;     // address of the function(function pointer)-THIS ADDRESS IS FOR COMPILER
        PieCtrlRegs.PIEACK.bit.ACK3=1;
        EDIS;
        IER=0Xffff;
        EINT;
        while(1);
}
void SysControl()
{
    EALLOW;
       ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL=00;
       ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN=0;
       for(i=0;i<=120;i++);
       ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV=0;
       for(i=0;i<5;i++)
       {
           ClkCfgRegs.SYSPLLCTL1.bit.PLLEN=0;
           ClkCfgRegs.SYSPLLMULT.bit.IMULT=16;
           ClkCfgRegs.SYSPLLMULT.bit.FMULT=1;  //GIVE VALUES ACCORDING TO FORMULA X

           while( ClkCfgRegs.SYSPLLSTS.bit.LOCKS!=1);

       }
       ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV=1;
       ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN=1;
       ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV=0;
       ClkCfgRegs.LOSPCP.bit.LSPCLKDIV=1;

        EDIS;
}

void ADCint()
{ EALLOW;
     CpuSysRegs.PCLKCR13.bit.ADC_A=1;        //enable the clock for the adc
     AdcaRegs.ADCCTL2.bit.PRESCALE=1010;     //divide by 6
     AdcaRegs.ADCCTL2.bit.RESOLUTION=0;      //12 bit mode
    AdcaRegs.ADCCTL2.bit.SIGNALMODE=0;       //single ended
    AdcaRegs.ADCCTL1.bit.ADCPWDNZ=1;         //power up for adc
    AdcaRegs.ADCSOC0CTL.bit.CHSEL=2;         //select channel 2
    AdcaRegs.ADCSOC0CTL.bit.TRIGSEL=01;      // trigger using timer 0
    AdcaRegs.ADCSOC0CTL.bit.ACQPS=83;        //500ns
    AdcaRegs.ADCCTL1.bit.INTPULSEPOS=1;      //interrupt occurs at the end of conversion
    AdcaRegs.ADCINTSEL1N2.bit.INT1SEL=0;     //select the interrupt
    AdcaRegs.ADCINTSEL1N2.bit.INT1E=1;       //enable interrupt

EDIS;
}
 void timerint()
 {
     EALLOW;
        CpuSysRegs.PCLKCR0.bit.CPUTIMER0=1;
        CpuTimer0Regs.TCR.bit.TSS=1;         //stop the timer
        CpuTimer0Regs.PRD.all=1000;
        CpuTimer0Regs.TPR.bit.PSC=16;
        CpuTimer0Regs.TCR.bit.TIF=1;        //clear the bit
        CpuTimer0Regs.TCR.bit.TIE=1;        //enable interrupt
        CpuTimer0Regs.TCR.bit.FREE=1;       //free running
        CpuTimer0Regs.TCR.bit.TRB=1;        //reloading
        CpuTimer0Regs.TCR.bit.TSS=0;        //start the timer
        EDIS;
 }
 void PWMInit(void)
 {
     EALLOW;
        ClkCfgRegs.PERCLKDIVSEL.bit.EPWMCLKDIV=1;//divide by 1
        CpuSysRegs.PCLKCR2.bit.EPWM1=1;      //peripheral clock enable
       // EPwm1Regs.TBCTL.bit.SYNCOSEL=00;   //time base synchronization
        CpuSysRegs.PCLKCR0.bit.TBCLKSYNC=1;
        EPwm1Regs.TBCTL.bit.HSPCLKDIV=1;
        EPwm1Regs.TBCTL.bit.CLKDIV=0;
        EPwm1Regs.TBPRD=4000;
        EPwm1Regs.TBCTL.bit.CTRMODE=00;      //up count mode
        EPwm1Regs.TBCTR=0;
        EPwm1Regs.AQCTLA.bit.ZRO=2;         //set output high
        EPwm1Regs.AQCTLA.bit.CAU=1;         //clear output
        EPwm1Regs.CMPA.bit.CMPA=150;

        EPwm1Regs.ETSEL.bit.INTSEL=1;       //select when counter zero
        EPwm1Regs.ETSEL.bit.INTEN=1;        //enable interrupt
        EPwm1Regs.ETCLR.bit.INT=1;          //clear interrupt
        GpioCtrlRegs.GPADIR.bit.GPIO0=1;    //as output pin
        GpioCtrlRegs.GPAGMUX1.bit.GPIO0=00;
        GpioCtrlRegs.GPAMUX1.bit.GPIO0=01;  //for pwm2
        GpioCtrlRegs.GPAPUD.bit.GPIO0=00;
        EDIS;

 }
 __interrupt void adcAISR()

 {
    EALLOW;
      CpuTimer0Regs.TCR.bit.TIF=1;
     j=AdcaResultRegs.ADCRESULT0;
     EPwm1Regs.CMPA.bit.CMPA=AdcaResultRegs.ADCRESULT0;
     AdcaRegs.ADCINTFLGCLR.bit.ADCINT1=1;   //clear the flag
     PieCtrlRegs.PIEACK.bit.ACK1=1;
   EDIS;

 }
 __interrupt void PWMISR(void)
 {

     EPwm1Regs.ETCLR.bit.INT=1;             //clear interrupt
     EPwm1Regs.CMPA.bit.CMPA=AdcaResultRegs.ADCRESULT0;
     PieCtrlRegs.PIEACK.bit.ACK3=1;

 }
